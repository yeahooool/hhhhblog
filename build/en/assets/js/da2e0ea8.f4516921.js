"use strict";(self.webpackChunkhf_log=self.webpackChunkhf_log||[]).push([[4e3],{3905:(n,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>m});var t=a(7294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function i(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function o(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function s(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},i=Object.keys(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(t=0;t<i.length;t++)a=i[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var l=t.createContext({}),p=function(n){var e=t.useContext(l),a=e;return n&&(a="function"==typeof n?n(e):o(o({},e),n)),a},u=function(n){var e=p(n.components);return t.createElement(l.Provider,{value:e},n.children)},c="mdxType",y={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},d=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,i=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),c=p(a),d=r,m=c["".concat(l,".").concat(d)]||c[d]||y[d]||i;return a?t.createElement(m,o(o({ref:e},u),{},{components:a})):t.createElement(m,o({ref:e},u))}));function m(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[c]="string"==typeof n?n:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4603:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=a(7462),r=(a(7294),a(3905));const i={},o="numpy",s={unversionedId:"Python/numpy",id:"Python/numpy",title:"numpy",description:"1. np.linalg.det(): numpy.linalg --- NumPy \u7684\u7ebf\u6027\u4ee3\u6570\u51fd\u6570; linalg.det \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u7684\u884c\u5217\u5f0f\u3002",source:"@site/docs/Python/numpy.md",sourceDirName:"Python",slug:"/Python/numpy",permalink:"/en/docs/Python/numpy",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Python/numpy.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"enumerate()",permalink:"/en/docs/Python/enumerate"},next:{title:"with open() as f:",permalink:"/en/docs/Python/open"}},l={},p=[],u={toc:p},c="wrapper";function y(n){let{components:e,...a}=n;return(0,r.kt)(c,(0,t.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"numpy"},"numpy"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.linalg.det()"),": numpy.linalg --- NumPy \u7684\u7ebf\u6027\u4ee3\u6570\u51fd\u6570; linalg.det \u8ba1\u7b97\u4e00\u4e2a\u6570\u7ec4\u7684\u884c\u5217\u5f0f\u3002"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"}," Examples\n --------\n The determinant of a 2-D array [[a, b], [c, d]] is ad - bc:\n\n >>> a = np.array([[1, 2], [3, 4]])\n >>> np.linalg.det(a)\n -2.0 # may vary\n\n Computing determinants for a stack of matrices:\n\n >>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n >>> a.shape\n (3, 2, 2)\n >>> np.linalg.det(a)\n array([-2., -3., -8.])\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'np.linalg.lstsq(a, b, rcond="warn")'),":NumPy\u4e2d\u7684\u7ebf\u6027\u4ee3\u6570\u51fd\u6570\u4e4b\u4e00\uff0c\u7528\u4e8e\u6c42\u89e3\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u89e3\u3002\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u662f\u6307\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u77e9\u9635X\u548c\u4e00\u4e2a\u5411\u91cfy\uff0c\u6c42\u89e3\u6700\u5c0f\u5316\u6b8b\u5dee\u5e73\u65b9\u548c\u7684\u5411\u91cfb\uff0c\u4f7f\u5f97y \u2248 Xb\u3002"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"a: \u5f62\u72b6\u4e3a(m,n)\u76842\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u77e9\u9635X\u3002"),(0,r.kt)("li",{parentName:"ul"},"b: \u5f62\u72b6\u4e3a(m,)\u6216(m, k)\u76841\u7ef4\u62162\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u5411\u91cfy\u3002"),(0,r.kt)("li",{parentName:"ul"},"rcond\uff08\u53ef\u9009\uff09\uff1a\u6d6e\u70b9\u6570\u6216None\uff0c\u8868\u793a\u5947\u5f02\u503c\u7684\u622a\u65ad\u9608\u503c\u3002\u5947\u5f02\u503c\u662f\u77e9\u9635\u7684\u7279\u5f81\u503c\u4e2d\u975e\u96f6\u7684\u6700\u5c0f\u503c\uff0c\u7528\u4e8e\u5224\u65ad\u77e9\u9635\u7684\u79e9\u3002\u9ed8\u8ba4\u503c\u4e3a-1\uff0c\u8868\u793a\u4f7f\u7528numpy.finfo(a.dtype).eps * max(m, n)\u4f5c\u4e3a\u9608\u503c\u3002")),(0,r.kt)("p",{parentName:"li"},"\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4(x, residuals, rank, s)\uff0c\u5176\u4e2d\uff1a"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"x\uff1a\u5f62\u72b6\u4e3a(n,)\u6216(n, k)\u76841\u7ef4\u62162\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u89e3b\u3002"),(0,r.kt)("li",{parentName:"ul"},"residuals\uff1a\u5f62\u72b6\u4e3a()\u6216(1,)\u76840\u7ef4\u62161\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u6b8b\u5dee\u5e73\u65b9\u548c\u3002\u5982\u679cb\u7684\u957f\u5ea6\u5927\u4e8e1\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u6b8b\u5dee\u5e73\u65b9\u548c\u7684\u6570\u7ec4\u3002"),(0,r.kt)("li",{parentName:"ul"},"rank\uff1a\u6574\u6570\uff0c\u8868\u793a\u77e9\u9635X\u7684\u79e9\u3002"),(0,r.kt)("li",{parentName:"ul"},"s\uff1a\u5f62\u72b6\u4e3a(min(m,n),)\u76841\u7ef4\u6570\u7ec4\uff0c\u8868\u793a\u5947\u5f02\u503c\u3002")),(0,r.kt)("p",{parentName:"li"},"\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u6f14\u793a\u5982\u4f55\u6c42\u89e3\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\uff1a"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import numpy as np\n\n# \u5b9a\u4e49\u77e9\u9635X\u548c\u5411\u91cfy\nX = np.array([[1, 1], [1, 2], [1, 3], [1, 4]])\ny = np.array([2, 3, 4, 5])\n\n# \u6c42\u89e3\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u89e3\nb, residuals, rank, s = np.linalg.lstsq(X, y, rcond=None)\n\n# \u8f93\u51fa\u7ed3\u679c\nprint("\u89e3b\uff1a", b)\nprint("\u6b8b\u5dee\u5e73\u65b9\u548c\uff1a", residuals)\nprint("\u77e9\u9635X\u7684\u79e9\uff1a", rank)\nprint("\u5947\u5f02\u503c\uff1a", s)\n\n>>>\n\u89e3b\uff1a [1. 1.]\n\u6b8b\u5dee\u5e73\u65b9\u548c\uff1a [4.18001683e-32]\n\u77e9\u9635X\u7684\u79e9\uff1a 2\n\u5947\u5f02\u503c\uff1a [5.77937881 0.77380911]\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.save(file, arr, allow_pickle=True, fix_imports=True)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"}," Save an array to a binary file in NumPy ``.npy`` format.\n\n Parameters\n ----------\n file : file, str, or pathlib.Path\n     File or filename to which the data is saved.  If file is a file-object,\n     then the filename is unchanged.  If file is a string or Path, a ``.npy``\n     extension will be appended to the filename if it does not already\n     have one.\n arr : array_like\n     Array data to be saved.\n allow_pickle : bool, optional\n     Allow saving object arrays using Python pickles. Reasons for disallowing\n     pickles include security (loading pickled data can execute arbitrary\n     code) and portability (pickled objects may not be loadable on different\n     Python installations, for example if the stored objects require libraries\n     that are not available, and not all pickled data is compatible between\n     Python 2 and Python 3).\n     Default: True\n fix_imports : bool, optional\n     Only useful in forcing objects in object arrays on Python 3 to be\n     pickled in a Python 2 compatible way. If `fix_imports` is True, pickle\n     will try to map the new Python 3 names to the old module names used in\n     Python 2, so that the pickle data stream is readable with Python 2.\n\n See Also\n --------\n savez : Save several arrays into a ``.npz`` archive\n savetxt, load\n\n Notes\n -----\n For a description of the ``.npy`` format, see :py:mod:`numpy.lib.format`.\n\n Any data saved to the file is appended to the end of the file.\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.tile(A, reps)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Construct an array by repeating A the number of times given by reps.\nParameters\n----------\nA : array_like\n    The input array.\nreps : array_like\n    The number of repetitions of `A` along each axis.\n\nReturns\n-------\nc : ndarray\n    The tiled output array.\n\nSee Also\n--------\nrepeat : Repeat elements of an array.\nbroadcast_to : Broadcast an array to a new shape\n\nExamples\n--------\n>>> a = np.array([0, 1, 2])\n>>> np.tile(a, 2)\narray([0, 1, 2, 0, 1, 2])\n>>> np.tile(a, (2, 2))\narray([[0, 1, 2, 0, 1, 2],\n       [0, 1, 2, 0, 1, 2]])\n>>> np.tile(a, (2, 1, 2))\narray([[[0, 1, 2, 0, 1, 2]],\n       [[0, 1, 2, 0, 1, 2]]])\n\n>>> b = np.array([[1, 2], [3, 4]])\n>>> np.tile(b, 2)\narray([[1, 2, 1, 2],\n       [3, 4, 3, 4]])\n>>> np.tile(b, (2, 1))\narray([[1, 2],\n       [3, 4],\n       [1, 2],\n       [3, 4]])\n\n>>> c = np.array([1,2,3,4])\n>>> np.tile(c,(4,1))\narray([[1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4],\n       [1, 2, 3, 4]])\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.concatenate(arrays, axis=None, out=None, *, dtype=None, casting=None)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting=\"same_kind\")\n\nJoin a sequence of arrays along an existing axis.\n\nParameters\n----------\na1, a2, ... : sequence of array_like\n    The arrays must have the same shape, except in the dimension\n    corresponding to `axis` (the first, by default).\naxis : int, optional\n    The axis along which the arrays will be joined.  If axis is None,\n    arrays are flattened before use.  Default is 0.\nout : ndarray, optional\n    If provided, the destination to place the result. The shape must be\n    correct, matching that of what concatenate would have returned if no\n    out argument were specified.\ndtype : str or dtype\n    If provided, the destination array will have this dtype. Cannot be\n    provided together with `out`.\n\ncasting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional\n    Controls what kind of data casting may occur. Defaults to 'same_kind'.\n\nReturns\n-------\nres : ndarray\n    The concatenated array.\n\nSee Also\n--------\nma.concatenate : Concatenate function that preserves input masks.\narray_split : Split an array into multiple sub-arrays of equal or\n              near-equal size.\nsplit : Split array into a list of multiple sub-arrays of equal size.\nhsplit : Split array into multiple sub-arrays horizontally (column wise).\nvsplit : Split array into multiple sub-arrays vertically (row wise).\ndsplit : Split array into multiple sub-arrays along the 3rd axis (depth).\nstack : Stack a sequence of arrays along a new axis.\nblock : Assemble arrays from blocks.\nhstack : Stack arrays in sequence horizontally (column wise).\nvstack : Stack arrays in sequence vertically (row wise).\ndstack : Stack arrays in sequence depth wise (along third dimension).\ncolumn_stack : Stack 1-D arrays as columns into a 2-D array.\n\nExamples\n--------\n>>> a = np.array([[1, 2], [3, 4]])\n>>> b = np.array([[5, 6]])\n>>> np.concatenate((a, b), axis=0)\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n>>> np.concatenate((a, b.T), axis=1)\narray([[1, 2, 5],\n       [3, 4, 6]])\n>>> np.concatenate((a, b), axis=None)\narray([1, 2, 3, 4, 5, 6])\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.loadtxt()"),": Load data from a text file.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.insert(arr, obj, values, axis=None)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"Insert values along the given axis before the given indices.\n\nParameters\n----------\narr : array_like\n    Input array.\nobj : int, slice or sequence of ints\n    Object that defines the index or indices before which `values` is\n    inserted.\n\n    .. versionadded:: 1.8.0\n\n    Support for multiple insertions when `obj` is a single scalar or a\n    sequence with one element (similar to calling insert multiple\n    times).\nvalues : array_like\n    Values to insert into `arr`. If the type of `values` is different\n    from that of `arr`, `values` is converted to the type of `arr`.\n    `values` should be shaped so that ``arr[...,obj,...] = values``\n    is legal.\naxis : int, optional\n    Axis along which to insert `values`.  If `axis` is None then `arr`\n    is flattened first.\n\nReturns\n-------\nout : ndarray\n    A copy of `arr` with `values` inserted.  Note that `insert`\n    does not occur in-place: a new array is returned. If\n    `axis` is None, `out` is a flattened array.\n\nSee Also\n--------\nappend : Append elements at the end of an array.\nconcatenate : Join a sequence of arrays along an existing axis.\ndelete : Delete elements from an array.\n\nNotes\n-----\nNote that for higher dimensional inserts ``obj=0`` behaves very different\nfrom ``obj=[0]`` just like ``arr[:,0,:] = values`` is different from\n``arr[:,[0],:] = values``.\n\nExamples\n--------\n>>> a = np.array([[1, 1], [2, 2], [3, 3]])\n>>> a\narray([[1, 1],\n       [2, 2],\n       [3, 3]])\n>>> np.insert(a, 1, 5)\narray([1, 5, 1, ..., 2, 3, 3])\n>>> np.insert(a, 1, 5, axis=1)\narray([[1, 5, 1],\n       [2, 5, 2],\n       [3, 5, 3]])\n\nDifference between sequence and scalars:\n\n>>> np.insert(a, [1], [[1],[2],[3]], axis=1)\narray([[1, 1, 1],\n       [2, 2, 2],\n       [3, 3, 3]])\n>>> np.array_equal(np.insert(a, 1, [1, 2, 3], axis=1),\n...                np.insert(a, [1], [[1],[2],[3]], axis=1))\nTrue\n\n>>> b = a.flatten()\n>>> b\narray([1, 1, 2, 2, 3, 3])\n>>> np.insert(b, [2, 2], [5, 6])\narray([1, 1, 5, ..., 2, 3, 3])\n\n>>> np.insert(b, slice(2, 4), [5, 6])\narray([1, 1, 5, ..., 2, 3, 3])\n\n>>> np.insert(b, [2, 2], [7.13, False]) # type casting\narray([1, 1, 7, ..., 2, 3, 3])\n\n>>> x = np.arange(8).reshape(2, 4)\n>>> idx = (1, 3)\n>>> np.insert(x, idx, 999, axis=1)\narray([[  0, 999,   1,   2, 999,   3],\n       [  4, 999,   5,   6, 999,   7]])\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"np.unique(ar, return_index=False, return_inverse=False,    return_counts=False, axis=None, *, equal_nan=True)"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"}," Find the unique elements of an array.\n\n Returns the sorted unique elements of an array. There are three optional\n outputs in addition to the unique elements:\n\n * the indices of the input array that give the unique values\n * the indices of the unique array that reconstruct the input array\n * the number of times each unique value comes up in the input array\n\n Parameters\n ----------\n ar : array_like\n     Input array. Unless `axis` is specified, this will be flattened if it\n     is not already 1-D.\n return_index : bool, optional\n     If True, also return the indices of `ar` (along the specified axis,\n     if provided, or in the flattened array) that result in the unique array.\n return_inverse : bool, optional\n     If True, also return the indices of the unique array (for the specified\n     axis, if provided) that can be used to reconstruct `ar`.\n return_counts : bool, optional\n     If True, also return the number of times each unique item appears\n     in `ar`.\n axis : int or None, optional\n     The axis to operate on. If None, `ar` will be flattened. If an integer,\n     the subarrays indexed by the given axis will be flattened and treated\n     as the elements of a 1-D array with the dimension of the given axis,\n     see the notes for more details.  Object arrays or structured arrays\n     that contain objects are not supported if the `axis` kwarg is used. The\n     default is None.\n equal_nan : bool, optional\n     If True, collapses multiple NaN values in the return array into one.\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Returns\n-------\nunique : ndarray\n    The sorted unique values.\nunique_indices : ndarray, optional\n    The indices of the first occurrences of the unique values in the\n    original array. Only provided if `return_index` is True.\nunique_inverse : ndarray, optional\n    The indices to reconstruct the original array from the\n    unique array. Only provided if `return_inverse` is True.\nunique_counts : ndarray, optional\n    The number of times each of the unique values comes up in the\n    original array. Only provided if `return_counts` is True.\n\n    .. versionadded:: 1.9.0\n\nSee Also\n--------\nnumpy.lib.arraysetops : Module with a number of other functions for\n                        performing set operations on arrays.\nrepeat : Repeat elements of an array.\n\n\nExamples\n--------\n>>> np.unique([1, 1, 2, 2, 3, 3])\narray([1, 2, 3])\n>>> a = np.array([[1, 1], [2, 3]])\n>>> np.unique(a)\narray([1, 2, 3])\n\nReturn the unique rows of a 2D array\n\n>>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])\n>>> np.unique(a, axis=0)\narray([[1, 0, 0], [2, 3, 4]])\n\nReturn the indices of the original array that give the unique values:\n\n>>> a = np.array(['a', 'b', 'b', 'c', 'a'])\n>>> u, indices = np.unique(a, return_index=True)\n>>> u\narray(['a', 'b', 'c'], dtype='<U1')\n>>> indices\narray([0, 1, 3])\n>>> a[indices]\narray(['a', 'b', 'c'], dtype='<U1')\n\nReconstruct the input array from the unique values and inverse:\n\n>>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n>>> u, indices = np.unique(a, return_inverse=True)\n>>> u\narray([1, 2, 3, 4, 6])\n>>> indices\narray([0, 1, 4, 3, 1, 2, 1])\n>>> u[indices]\narray([1, 2, 6, 4, 2, 3, 2])\n\nReconstruct the input values from the unique values and counts:\n\n>>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n>>> values, counts = np.unique(a, return_counts=True)\n>>> values\narray([1, 2, 3, 4, 6])\n>>> counts\narray([1, 3, 1, 1, 1])\n>>> np.repeat(values, counts)\narray([1, 2, 2, 2, 3, 4, 6])    # original order not preserved\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"\n9. `np.math.ceil()`:\u5728Python\u4e2d\uff0cmath\u6a21\u5757\u5305\u542b\u8bb8\u591a\u6570\u5b66\u8fd0\u7b97\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u6a21\u5757\u8f7b\u677e\u5730\u6267\u884c\u8fd9\u4e9b\u8fd0\u7b97\u3002\u51fd\u6570Math.ceil(x)\u8fd4\u56de\u5927\u4e8e\u6570\u5b57x\u7684\u6700\u5c0f\u6574\u6570\u503c\u3002\u5982\u679cnumber\u5df2\u7ecf\u662f\u6574\u6570\uff0c\u5219\u8fd4\u56de\u76f8\u540c\u7684\u6570\u5b57\u3002\n10. `.tolist()`: NumPy\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5c06NumPy\u6570\u7ec4\u8f6c\u6362\u4e3aPython\u5217\u8868\u3002\n")))}y.isMDXComponent=!0}}]);