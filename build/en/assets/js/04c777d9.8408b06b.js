"use strict";(self.webpackChunkhf_log=self.webpackChunkhf_log||[]).push([[2065],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var a=t(7294);function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,p=function(e,n){if(null==e)return{};var t,a,p={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(p[t]=e[t]);return p}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(p[t]=e[t])}return p}var l=a.createContext({}),m=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=m(e.components);return a.createElement(l.Provider,{value:n},e.children)},s="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,p=e.mdxType,i=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),s=m(t),y=p,u=s["".concat(l,".").concat(y)]||s[y]||_[y]||i;return t?a.createElement(u,o(o({ref:n},d),{},{components:t})):a.createElement(u,o({ref:n},d))}));function u(e,n){var t=arguments,p=n&&n.mdxType;if("string"==typeof e||p){var i=t.length,o=new Array(i);o[0]=y;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[s]="string"==typeof e?e:p,o[1]=r;for(var m=2;m<i;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7041:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>_,frontMatter:()=>i,metadata:()=>r,toc:()=>m});var a=t(7462),p=(t(7294),t(3905));const i={slug:"libtorch2",title:"libtorch\u4fee\u6539\u4f7f\u7528\u8bb0\u5f552",authors:["hf"],tags:["python","libtorch"]},o=void 0,r={permalink:"/en/blog/libtorch2",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-10-31-pytorch/2023-11-01-libtorch2.md",source:"@site/blog/2023-10-31-pytorch/2023-11-01-libtorch2.md",title:"libtorch\u4fee\u6539\u4f7f\u7528\u8bb0\u5f552",description:"\u4f7f\u7528 libtorch \u65f6\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u6570\u503c\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u95ee\u9898\u3002",date:"2023-11-01T00:00:00.000Z",formattedDate:"November 1, 2023",tags:[{label:"python",permalink:"/en/blog/tags/python"},{label:"libtorch",permalink:"/en/blog/tags/libtorch"}],readingTime:15.78,hasTruncateMarker:!1,authors:[{name:"\u55b5s\u01ceng~",title:"\u4e00\u4ecb\u8349\u6c11",url:"https://github.com/yeahooool",imageURL:"https://z1.ax1x.com/2023/10/31/pinJO8H.jpg",key:"hf"}],frontMatter:{slug:"libtorch2",title:"libtorch\u4fee\u6539\u4f7f\u7528\u8bb0\u5f552",authors:["hf"],tags:["python","libtorch"]},nextItem:{title:"libtorch\u4fee\u6539\u4f7f\u7528\u8bb0\u5f55",permalink:"/en/blog/libtorch1"}},l={authorsImageUrls:[void 0]},m=[],d={toc:m},s="wrapper";function _(e){let{components:n,...t}=e;return(0,p.kt)(s,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"\u4f7f\u7528 libtorch \u65f6\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u51fd\u6570\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u6570\u503c\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u95ee\u9898\u3002"),(0,p.kt)("p",null,"\u5982\u4e0b\u6240\u793a\u4ee3\u7801\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def get_train_2body_type(self, atom_type_data):\n    type_2body_list = []\n    type_2body_index = []\n    for _ in atom_type_data:\n        if _ != 0:\n            type_2body_index.append(self.atom_type.index(_))\n\n    for atom in type_2body_index:\n        type_2body = []\n        for atom2 in type_2body_index:\n            type_2body.append([atom, atom2])\n        type_2body_list.append(type_2body)\n    return type_2body_list, len(type_2body_index)\n")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"emb_list, type_nums =  self.get_train_2body_type(list(np.array(atom_type.cpu())[0]))\n")),(0,p.kt)("p",null,"\u4f7f\u7528",(0,p.kt)("inlineCode",{parentName:"p"},"torch.jit.script"),"\u5c06\u51fd\u6570\u7f16\u8bd1\u4e3a torchscript \u65f6\uff0c\u4f1a\u62a5\u9519:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\nUnknown type name 'List[numpy.int32]':\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 109\n    def get_train_2body_type(self, atom_type_data):\n                                   ~~~~~~~~~~~~~~ <--- HERE\n        type_2body_list = []\n        type_2body_index = []\n'DP.get_train_2body_type' is being compiled since it was called from 'DP.forward'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 147\n        batch_size = Ri.shape[0]\n        atom_sum = 0\n        emb_list, type_nums =  self.get_train_2body_type(list(np.array(atom_type.cpu())[0]))\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n")),(0,p.kt)("p",null,"\u6b64\u9519\u8bef\u8868\u660e TorchScript \u7f16\u8bd1\u5668\u5728\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\u65f6\u9047\u5230\u4e86\u4e00\u4e2a\u672a\u77e5\u7684\u7c7b\u578b ",(0,p.kt)("inlineCode",{parentName:"p"},"'List[numpy.int32]'"),"\u3002TorchScript \u9700\u8981\u7c7b\u578b\u4fe1\u606f\u6765\u7f16\u8bd1\u548c\u4f18\u5316\u4ee3\u7801\uff0c\u4f46\u5b83\u4e0d\u652f\u6301\u6240\u6709 Python \u7c7b\u578b\u3002\u5c24\u5176\u662f\uff0c\u5b83\u4e0d\u76f4\u63a5\u652f\u6301 ",(0,p.kt)("inlineCode",{parentName:"p"},"numpy")," \u7c7b\u578b\uff0c\u56e0\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"numpy")," \u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e ",(0,p.kt)("inlineCode",{parentName:"p"},"PyTorch")," \u7684\u5e93\u3002\u56e0\u6b64\u5c06\u4e00\u4e2a ",(0,p.kt)("inlineCode",{parentName:"p"},"numpy")," \u6570\u7ec4\u76f4\u63a5\u4f20\u9012\u7ed9\u4e00\u4e2a TorchScript \u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u5c06 ",(0,p.kt)("inlineCode",{parentName:"p"},"numpy")," \u6570\u7ec4\u8f6c\u6362\u4e3a TorchScript \u652f\u6301\u7684\u7c7b\u578b\uff0c\u5982\u6807\u51c6 ",(0,p.kt)("inlineCode",{parentName:"p"},"Python")," \u5217\u8868\u6216 ",(0,p.kt)("inlineCode",{parentName:"p"},"PyTorch")," \u5f20\u91cf\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"emb_list, type_nums = self.get_train_2body_type(atom_type[0])\n")),(0,p.kt)("p",null,"\u4fee\u6539\u540e\uff0c\u4ee3\u7801\u4ecd\u7136\u62a5\u9519\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\n\naten::append.t(t[](a!) self, t(c -> *) el) -> t[](a!):\nCould not match type int to t in argument 'el': Type variable 't' previously matched to type Tensor is matched to type int.\n:\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 114\n        for _ in atom_type_data:\n            if _ != 0:\n                type_2body_index.append(self.atom_type.index(_))\n                ~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n\n        for atom in type_2body_index:\n'DP.get_train_2body_type' is being compiled since it was called from 'DP.forward'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 148\n        atom_sum = 0\n        # emb_list, type_nums =  self.get_train_2body_type(list(np.array(atom_type.cpu())[0]))\n        emb_list, type_nums =  self.get_train_2body_type(atom_type.cpu().tolist()[0])\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n\n")),(0,p.kt)("p",null,"\u95ee\u9898\u51fa\u5728 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_index.append(self.atom_type.index(_))")," \u8fd9\u884c\u4ee3\u7801\u4e0a\u3002TorchScript \u8bd5\u56fe\u5c06\u4e00\u4e2a\u6574\u6570\uff08\u4ece ",(0,p.kt)("inlineCode",{parentName:"p"},"self.atom_type.index(_)")," \u8fd4\u56de\uff09\u6dfb\u52a0\u5230\u4e00\u4e2a\u5b83\u8ba4\u4e3a\u5e94\u8be5\u6301\u6709\u5f20\u91cf\u7684\u5217\u8868\u4e2d\u3002"),(0,p.kt)("p",null,"\u6839\u636e\u4ee3\u7801\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_index")," \u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u6b63\u5728\u4f7f\u7528\u7684 Python \u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"list.index()")," \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u627e\u5230\u7684\u5143\u7d20\u7684\u7d22\u5f15\uff0c\u8fd9\u662f\u4e00\u4e2a",(0,p.kt)("inlineCode",{parentName:"p"},"\u6574\u6570"),"\u3002\u56e0\u6b64\uff0cTorchScript \u629b\u51fa\u7684\u9519\u8bef\u8868\u660e\u5728\u67d0\u4e2a\u5730\u65b9\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_index")," \u88ab\u63a8\u65ad\u4e3a\u5e94\u8be5\u6301\u6709\u5f20\u91cf\u800c\u4e0d\u662f\u6574\u6570\u3002"),(0,p.kt)("p",null,"\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_index")," \u5728\u6574\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u90fd\u88ab\u89c6\u4e3a\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002\u6b64\u5916\uff0c\u7531\u4e8e TorchScript \u7684\u9650\u5236\uff0c\u6211\u4eec\u9700\u8981\u907f\u514d\u5728\u88ab TorchScript \u7f16\u8bd1\u7684\u51fd\u6570\u4e2d\u4f7f\u7528\u50cf ",(0,p.kt)("inlineCode",{parentName:"p"},"list.index()")," \u8fd9\u6837\u7684 Python \u5185\u5efa\u65b9\u6cd5\uff0c\u56e0\u4e3a TorchScript \u4e0d\u652f\u6301\u6240\u6709\u7684 Python \u5185\u5efa\u51fd\u6570\u548c\u65b9\u6cd5\u3002"),(0,p.kt)("p",null,"\u4e0b\u9762\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u4fee\u6539\u65b9\u5f0f\uff0c\u5b83\u907f\u514d\u4e86\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"list.index()")," \u5e76\u6e05\u6670\u5730\u6307\u5b9a\u4e86 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_index")," \u548c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_list")," \u5e94\u8be5\u6301\u6709\u7684\u6570\u636e\u7c7b\u578b\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def get_train_2body_type(self, atom_type_data: torch.Tensor) -> Tuple[List[List[int]], int]:\n    type_2body_list: List[List[int]] = []\n    type_2body_index: List[int] = []\n    for atom_type in atom_type_data:\n        if atom_type != 0:\n            # \u624b\u52a8\u67e5\u627e\u7d22\u5f15\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 list.index()\n            for i, known_type in enumerate(self.atom_type):\n                if atom_type == known_type:\n                    type_2body_index.append(i)\n                    break\n\n    for atom in type_2body_index:\n        type_2body = []\n        for atom2 in type_2body_index:\n            type_2body.append([atom, atom2])\n        type_2body_list.append(type_2body)\n    return type_2body_list, len(type_2body_index)\n\n")),(0,p.kt)("p",null,"\u5728\u8fd9\u4e2a\u4fee\u6b63\u4e2d\uff0c\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\uff0c\u660e\u786e\u6307\u51fa ",(0,p.kt)("inlineCode",{parentName:"p"},"atom_type_data")," \u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u800c ",(0,p.kt)("inlineCode",{parentName:"p"},"get_train_2body_type")," \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u8be5\u5143\u7ec4\u5305\u542b\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\u548c\u4e00\u4e2a\u6574\u6570\u3002"),(0,p.kt)("p",null,"\u4f46\u662f\uff0c\u8fd9\u4e2a\u4fee\u6b63\u4ecd\u7136\u4f1a\u5bfc\u81f4 TorchScript \u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\n\naten::append.t(t[](a!) self, t(c -> *) el) -> t[](a!):\nCould not match type List[int] to t in argument 'el': Type variable 't' previously matched to type Tensor is matched to type List[int].\n:\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 125\n            type_2body = []\n            for atom2 in type_2body_index:\n                type_2body.append([atom, atom2])\n                ~~~~~~~~~~~~~~~~~ <--- HERE\n            type_2body_list.append(type_2body)\n        return type_2body_list, len(type_2body_index)\n")),(0,p.kt)("p",null,"\u6b64\u9519\u8bef\u8868\u660e\u5728\u5c1d\u8bd5\u5c06\u4e00\u4e2a\u7c7b\u578b\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"List[int]")," \u7684\u9879\u6dfb\u52a0\u5230\u9884\u671f\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"Tensor")," \u7c7b\u578b\u7684\u5217\u8868\u65f6\u53d1\u751f\u4e86\u7c7b\u578b\u4e0d\u5339\u914d\u3002\u8fd9\u662f\u7531\u4e8e TorchScript \u671f\u671b\u5217\u8868\u4e2d\u7684\u6240\u6709\u9879\u7c7b\u578b\u90fd\u76f8\u540c\uff0c\u800c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u68c0\u6d4b\u5230\u4e86\u4e00\u4e2a\u4e0d\u5339\u914d\u7684\u7c7b\u578b\u3002"),(0,p.kt)("p",null,"\u95ee\u9898\u51fa\u5728 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body.append([atom, atom2])")," \u8fd9\u884c\u4ee3\u7801\u3002\u770b\u8d77\u6765 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body")," \u88ab\u63a8\u65ad\u4e3a\u4e00\u4e2a\u5f20\u91cf\u5217\u8868\uff0c\u4f46\u8bd5\u56fe\u5c06\u4e00\u4e2a\u6574\u6570\u5217\u8868",(0,p.kt)("inlineCode",{parentName:"p"},"\uff08[atom, atom2]\uff09"),"\u6dfb\u52a0\u5230\u6b64\u5217\u8868\u4e2d\u3002"),(0,p.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u4fdd\u8bc1 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body")," \u548c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_list")," \u7684\u7c7b\u578b\u5728\u6574\u4e2a\u51fd\u6570\u4e2d\u4fdd\u6301\u4e00\u81f4\u3002\u5982\u679c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body")," \u548c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_list")," \u90fd\u5e94\u8be5\u662f\u6574\u6570\u5217\u8868\u7684\u5217\u8868\uff0c\u9700\u8981\u786e\u4fdd\u8fd9\u4e00\u70b9\uff0c\u5e76\u907f\u514d\u5c06\u5b83\u4eec\u4e0e\u5f20\u91cf\u6df7\u6dc6\u3002"),(0,p.kt)("p",null,"\u4e0b\u9762\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u4fee\u6539\u65b9\u5f0f\uff0c\u6e05\u6670\u5730\u6307\u5b9a\u4e86 ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body")," \u548c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_2body_list")," \u5e94\u8be5\u6301\u6709\u7684\u6570\u636e\u7c7b\u578b\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def get_train_2body_type(self, atom_type_data: torch.Tensor) -> Tuple[List[List[List[int]]], int]:\n    type_2body_list: List[List[List[int]]] = []  # \u4fee\u6539\u8fd9\u91cc\uff0c\u786e\u4fdd\u6211\u4eec\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\n    type_2body_index: List[int] = []\n    for atom_type in atom_type_data:\n        if atom_type != 0:\n            for i, known_type in enumerate(self.atom_type):\n                if atom_type == known_type:\n                    type_2body_index.append(i)\n                    break\n\n    for atom in type_2body_index:\n        type_2body: List[List[int]] = []  # \u786e\u4fdd\u8fd9\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\n        for atom2 in type_2body_index:\n            type_2body.append([atom, atom2])  # \u8fd9\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\n        type_2body_list.append(type_2body)  # \u8fd9\u91cc\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\uff0c\u56e0\u4e3a type_2body \u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\n    return type_2body_list, len(type_2body_index)\n\n")),(0,p.kt)("hr",null),(0,p.kt)("p",null,"\u4ee3\u7801\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff0c\u4f46\u662f\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u5904\u53c8\u62a5\u9519\u4e86\uff1a"),(0,p.kt)("p",null,"\u8fd9\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"Ei = None\nfor type_emb in emb_list:\n    xyz_scater_a = None\n    for emb in type_emb:\n        ntype, ntype_1 = emb\n        S_Rij = Ri[:, atom_sum:atom_sum+natoms[ntype], ntype_1 * self.maxNeighborNum:(ntype_1+1) * self.maxNeighborNum, 0].unsqueeze(-1)\n        embedding_index = ntype * self.ntypes + ntype_1\n        G = self.embedding_net[embedding_index](S_Rij)\n        tmp_a = Ri[:, atom_sum:atom_sum+natoms[ntype], ntype_1 * self.maxNeighborNum:(ntype_1+1) * self.maxNeighborNum].transpose(-2, -1)\n        tmp_b = torch.matmul(tmp_a, G)\n        xyz_scater_a = tmp_b if xyz_scater_a is None else xyz_scater_a + tmp_b\n")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\nExpected integer literal for index but got a variable or non-integer. ModuleList/Sequential indexing is only supported with integer literals. For example, 'i = 4; self.layers[i](x)' will fail because i is not a literal. Enumeration is supported, e.g. 'for index, v in enumerate(self): out = v(inp)':\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 168\n                G = self.embedding_net[embedding_index](S_Rij)\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n")),(0,p.kt)("p",null,"\u8fd9\u4e2a\u9519\u8bef\u662f\u56e0\u4e3a\u5728 TorchScript \u4e2d\uff0c\u4e0d\u80fd\u4f7f\u7528\u975e\u5b57\u9762\u91cf\uff08non-literal\uff09\u7d22\u5f15\u6765\u7d22\u5f15 ",(0,p.kt)("inlineCode",{parentName:"p"},"ModuleList")," \u6216 ",(0,p.kt)("inlineCode",{parentName:"p"},"Sequential"),"\u3002\u4ee3\u7801\u4e2d\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"embedding_index")," \u548c ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u662f\u5728\u8fd0\u884c\u65f6\u786e\u5b9a\u7684\u53d8\u91cf\uff0c\u800c TorchScript \u8981\u6c42\u4f7f\u7528\u6574\u6570\u5b57\u9762\u91cf\uff08\u4f8b\u5982\uff0c\u76f4\u63a5\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"self.layers[0]")," \u800c\u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"self.layers[i]"),"\uff0c\u5176\u4e2d ",(0,p.kt)("inlineCode",{parentName:"p"},"i")," \u662f\u4e00\u4e2a\u53d8\u91cf\uff09"),(0,p.kt)("p",null,"\u4e00\u79cd\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 enumerate \u548c\u4e00\u4e2a\u5faa\u73af\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7d22\u5f15\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"# ... \u5176\u4ed6\u4ee3\u7801 ...\n\n# self.embedding_net \u662f\u4e00\u4e2a ModuleList\nfor idx, emb_net in enumerate(self.embedding_net):\n    if idx == embedding_index:\n        G = emb_net(S_Rij)\n        break\n\n# ... \u5176\u4ed6\u4ee3\u7801 ...\n\n# self.fitting_net \u662f\u4e00\u4e2a ModuleList\nfor idx, fit_net in enumerate(self.fitting_net):\n    if idx == ntype:\n        Ei_ntype = fit_net(DR_ntype)\n        break\n\n# ... \u5176\u4ed6\u4ee3\u7801 ...\n\n")),(0,p.kt)("p",null,"\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"enumerate")," \u51fd\u6570\u548c\u4e00\u4e2a\u5faa\u73af\u6765\u904d\u5386 ",(0,p.kt)("inlineCode",{parentName:"p"},"ModuleList")," \u7684\u6240\u6709\u5143\u7d20\u3002\u5f53\u627e\u5230\u4e0e ",(0,p.kt)("inlineCode",{parentName:"p"},"embedding_index")," \u6216 ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u5339\u914d\u7684\u7d22\u5f15\u65f6\uff0c\u5bf9\u5e94\u7684\u7f51\u7edc\u88ab\u7528\u4e8e\u524d\u5411\u4f20\u9012\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u4f1a\u7565\u5fae\u964d\u4f4e\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u8fed\u4ee3\u6574\u4e2a\u5217\u8868\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a TorchScript \u7684\u9650\u5236\u3002"),(0,p.kt)("p",null,"\u4f46\u662f\uff0c\u7ee7\u7eed\u6267\u884c\uff0c\u53d1\u73b0\u4ee3\u7801\u53c8\u62a5\u9519\u4e86\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},'RuntimeError:\nBecause we emit iteration over modulelists or tuples as unrolled loops, we do not support break or continue inside the body of these loops:\n  File "/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py", line 170\n                    if idx == embedding_index:\n                        G = emb_net(S_Rij)\n                        break\n                        ~~~~~ <--- HERE\n')),(0,p.kt)("p",null,"\u8fd9\u662f\u56e0\u4e3a\u5728 TorchScript \u4e2d\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"ModuleList")," \u7684\u5faa\u73af\u8fed\u4ee3\u88ab\u89c6\u4e3a\u5b8c\u5168\u5c55\u5f00\u7684\u5faa\u73af\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u5728\u8fd9\u4e9b\u5faa\u73af\u4e2d\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"break"),"\u3002"),(0,p.kt)("p",null,"\u4ee5\u4e0b\u662f\u4e00\u79cd\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u907f\u514d\u4e86\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"break"),"\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"found = False\nfor idx, emb_net in enumerate(self.embedding_net):\n    if idx == embedding_index and not found:\n        G = emb_net(S_Rij)\n        found = True\n\n# ... \u5176\u4ed6\u4ee3\u7801 ...\n\nfound = False\nfor idx, fit_net in enumerate(self.fitting_net):\n    if idx == ntype and not found:\n        Ei_ntype = fit_net(DR_ntype)\n        found = True\n\n")),(0,p.kt)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf ",(0,p.kt)("inlineCode",{parentName:"p"},"found"),"\uff0c\u5b83\u7528\u4e8e\u8ddf\u8e2a\u662f\u5426\u5df2\u7ecf\u627e\u5230\u4e86\u5339\u914d\u7684\u7d22\u5f15\u3002\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u4f1a\u7565\u5fae\u964d\u4f4e\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u8fed\u4ee3\u6574\u4e2a\u5217\u8868\u3002"),(0,p.kt)("p",null,"\u7ee7\u7eed\u6267\u884c\uff0c\u53d1\u73b0\u4ee3\u7801\u53c8\u62a5\u9519\u4e86\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},'G is not defined in the false branch:\n  File "/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py", line 169\n                found = False\n                for idx, emb_net in enumerate(self.embedding_net):\n                    if idx == embedding_index and not found:\n                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                        G = emb_net(S_Rij)\n                        ~~~~~~~~~~~~~~~~~~\n                        found = True\n                        ~~~~~~~~~~~~ <--- HERE\n')),(0,p.kt)("p",null,"\u8fd9\u4e2a\u9519\u8bef\u53d1\u751f\u662f\u56e0\u4e3a\u5728 TorchScript \u7684\u9759\u6001\u56fe\u4e2d\uff0c\u53d8\u91cf ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u5fc5\u987b\u5728\u6240\u6709\u4ee3\u7801\u8def\u5f84\u4e0a\u90fd\u88ab\u5b9a\u4e49\u3002",(0,p.kt)("font",{color:"red"},"\u7531\u4e8e ",(0,p.kt)("inlineCode",{parentName:"p"},"if")," \u8bed\u53e5\u7684\u6761\u4ef6\u53ef\u80fd\u4e0d\u6ee1\u8db3\uff0cTorchScript \u8ba4\u4e3a\u5b58\u5728\u4e00\u4e2a\u4ee3\u7801\u5206\u652f\u5728\u8be5\u5206\u652f\u4e2d ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u6ca1\u6709\u88ab\u5b9a\u4e49\u3002\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u5728\u6240\u6709\u5206\u652f\u4e0a ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u90fd\u88ab\u5b9a\u4e49\u3002")),(0,p.kt)("p",null,"\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5faa\u73af\u4e4b\u524d\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u8bbe\u7f6e\u4e00\u4e2a\u9ed8\u8ba4\u503c:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"G = None\nfound = False\nfor idx, emb_net in enumerate(self.embedding_net):\n    if idx == embedding_index and not found:\n        G = emb_net(S_Rij)\n        found = True\n")),(0,p.kt)("p",null,"\u5982\u4e0a\u6240\u793a\uff0c\u76f4\u63a5\u4e3a",(0,p.kt)("inlineCode",{parentName:"p"},"G"),"\u521d\u59cb\u5316\u4e86\u4e00\u4e2a",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\u503c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5728\u5faa\u73af\u4e4b\u524d",(0,p.kt)("inlineCode",{parentName:"p"},"G"),"\u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e86\u3002\u4f46\u662f\u8fd0\u884c\u4f1a\u53d1\u73b0\uff0c\u4ee3\u7801\u53c8\u62a5\u9519\u4e86\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\nVariable 'G' previously had type NoneType but is now being assigned to a value of type Tensor\n:\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 387\n                for idx, emb_net in enumerate(self.embedding_net):\n                    if idx == embedding_index and not found:\n                        G = emb_net(S_Rij)\n                        ~ <--- HERE\n                        found = True\n            else:\n'DP.calculate_xyz_scater' is being compiled since it was called from 'DP.calculate_Ei'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 355\n        atom_sum = 0\n        for type_emb in emb_list:\n            xyz_scater_a, xyz_scater_b, ntype = self.calculate_xyz_scater(Ri, atom_sum, natoms, type_emb, type_nums)\n            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n            DR_ntype = torch.matmul(xyz_scater_a.transpose(-2, -1), xyz_scater_b)\n            DR_ntype = DR_ntype.reshape(batch_size, natoms[ntype], -1)\n'DP.calculate_Ei' is being compiled since it was called from 'DP.forward'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 329\n        emb_list, type_nums = self.get_train_2body_type(atom_type[0])\n\n        Ei = self.calculate_Ei(Ri, natoms, batch_size, emb_list, type_nums)\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n")),(0,p.kt)("p",null,"\u8fd9\u4e2a\u9519\u8bef\u662f\u56e0\u4e3a TorchScript \u8981\u6c42\u53d8\u91cf\u5728\u5176\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u5177\u6709\u4e00\u81f4\u7684\u7c7b\u578b\u3002\u5f53\u5c06 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u521d\u59cb\u5316\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"None")," \u65f6\uff0c\u5b83\u88ab\u63a8\u65ad\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"NoneType")," \u7c7b\u578b\u3002\u968f\u540e\uff0c\u5c06\u4e00\u4e2a ",(0,p.kt)("inlineCode",{parentName:"p"},"Tensor")," \u5206\u914d\u7ed9 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u65f6\uff0c\u8fd9\u4f1a\u4e0e\u63a8\u65ad\u7684\u7c7b\u578b\u51b2\u7a81\uff0c\u4ece\u800c\u5bfc\u81f4\u9519\u8bef\u3002\u4e3a\u4e86\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e94\u8be5\u4f7f\u7528 TorchScript \u7684\u7c7b\u578b\u6ce8\u89e3\u6765\u6307\u5b9a\u53d8\u91cf\u53ef\u80fd\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u53ef\u4ee5\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None")," \u6216 ",(0,p.kt)("inlineCode",{parentName:"p"},"Tensor"),"\u3002"),(0,p.kt)("p",null,"\u4e0b\u9762\u662f\u4fee\u6539\u4ee3\u7801\u7684\u65b9\u6cd5:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"G: Optional[torch.Tensor] = None\nfound = False\nfor idx, emb_net in enumerate(self.embedding_net):\n    if idx == embedding_index and not found:\n        G = emb_net(S_Rij)\n        found = True\n")),(0,p.kt)("p",null,"\u8fd9\u91cc\u4f7f\u7528\u4e86\u7c7b\u578b\u6ce8\u89e3 ",(0,p.kt)("inlineCode",{parentName:"p"},"Optional[torch.Tensor]"),"\uff0c\u5b83\u8868\u793a ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u53ef\u4ee5\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None")," \u6216 ",(0,p.kt)("inlineCode",{parentName:"p"},"Tensor"),"\u3002\u8fd9\u6837\uff0cTorchScript \u5c31\u53ef\u4ee5\u63a8\u65ad\u51fa ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u7684\u7c7b\u578b\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"Optional[torch.Tensor]"),"\uff0c\u5e76\u4e14\u5728\u5c06 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u5206\u914d\u7ed9 ",(0,p.kt)("inlineCode",{parentName:"p"},"emb_net(S_Rij)")," \u65f6\uff0c\u4e0d\u4f1a\u53d1\u751f\u7c7b\u578b\u51b2\u7a81\u3002"),(0,p.kt)("p",null,"\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u56e0\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u53ef\u4ee5\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\uff0c\u6240\u4ee5\u5728\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u65f6\u9700\u8981\u786e\u4fdd\u5b83\u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\u3002\u4e0d\u7136\u4f1a\u62a5\u9519\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"RuntimeError:\nArguments for call are not valid.\nThe following variants are available:\n\n  aten::matmul(Tensor self, Tensor other) -> Tensor:\n  Expected a value of type 'Tensor' for argument 'other' but instead found type 'Optional[Tensor]'.\n\n  aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!):\n  Expected a value of type 'Tensor' for argument 'other' but instead found type 'Optional[Tensor]'.\n\nThe original call is:\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 400\n            tmp_b = torch.matmul(tmp_a, G)\n                    ~~~~~~~~~~~~ <--- HERE\n            xyz_scater_a = tmp_b if xyz_scater_a is None else xyz_scater_a + tmp_b\n'DP.calculate_xyz_scater' is being compiled since it was called from 'DP.calculate_Ei'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 355\n        atom_sum = 0\n        for type_emb in emb_list:\n            xyz_scater_a, xyz_scater_b, ntype = self.calculate_xyz_scater(Ri, atom_sum, natoms, type_emb, type_nums)\n            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n            DR_ntype = torch.matmul(xyz_scater_a.transpose(-2, -1), xyz_scater_b)\n            DR_ntype = DR_ntype.reshape(batch_size, natoms[ntype], -1)\n'DP.calculate_Ei' is being compiled since it was called from 'DP.forward'\n  File \"/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py\", line 329\n        emb_list, type_nums = self.get_train_2body_type(atom_type[0])\n\n        Ei = self.calculate_Ei(Ri, natoms, batch_size, emb_list, type_nums)\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <--- HERE\n")),(0,p.kt)("p",null,"\u62a5\u9519\u4ee3\u7801\u51fa\u73b0\u5728 ",(0,p.kt)("inlineCode",{parentName:"p"},"tmp_b = torch.matmul(tmp_a, G)")," \u8fd9\u884c\u4ee3\u7801\u4e0a\u3002\u8fd9\u662f\u56e0\u4e3a TorchScript \u65e0\u6cd5\u63a8\u65ad ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\uff0c\u56e0\u6b64\u5b83\u5c06 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u7684\u7c7b\u578b\u63a8\u65ad\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"Optional[torch.Tensor]"),"\u3002\u56e0\u6b64\uff0c\u5f53\u5c06 ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u4f20\u9012\u7ed9 ",(0,p.kt)("inlineCode",{parentName:"p"},"torch.matmul")," \u65f6\uff0cTorchScript \u4f1a\u62a5\u9519\uff0c\u56e0\u4e3a ",(0,p.kt)("inlineCode",{parentName:"p"},"torch.matmul")," \u671f\u671b\u4e00\u4e2a ",(0,p.kt)("inlineCode",{parentName:"p"},"Tensor"),"\uff0c\u800c\u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"Optional[torch.Tensor]"),"\u3002"),(0,p.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5fc5\u987b\u786e\u4fdd",(0,p.kt)("inlineCode",{parentName:"p"},"G"),"\u5728\u4f20\u9012\u7ed9 ",(0,p.kt)("inlineCode",{parentName:"p"},"torch.matmul")," \u65f6\u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None")," \u3002\u800c",(0,p.kt)("inlineCode",{parentName:"p"},"G"),"\u901a\u8fc7\u521d\u59cb\u5316\u540e\u5728\u968f\u540e\u4ee3\u7801\u4e2d\u7ecf\u8fc7\u4e86\u8d4b\u503c\uff0c\u53ef\u4ee5\u786e\u4fdd\u5b83\u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"assert")," \u8bed\u53e5\u6765\u786e\u4fdd ",(0,p.kt)("inlineCode",{parentName:"p"},"G")," \u4e0d\u662f ",(0,p.kt)("inlineCode",{parentName:"p"},"None"),"\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"# ... \u5176\u4ed6\u4ee3\u7801 ...\nassert G is not None\ntmp_b = torch.matmul(tmp_a, G)\n")),(0,p.kt)("p",null,"\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"Optional")," \u7c7b\u578b\u7684 ",(0,p.kt)("inlineCode",{parentName:"p"},"is not None")," \u68c0\u67e5\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},'# ... \u5176\u4ed6\u4ee3\u7801 ...\n# if G is None:\n#     raise ValueError("G has not been initialized properly.")\nif G is not None:\n    tmp_b = torch.matmul(tmp_a, G)\n')),(0,p.kt)("hr",null),(0,p.kt)("p",null,"\u7ee7\u7eed\u6267\u884c\uff0c\u53d1\u73b0\u4ee3\u7801\u53c8\u62a5\u9519\u4e86\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},'RuntimeError:\nundefined value ntype:\n  File "/data/home/hfhuang/software/PWmatMLFF/src/model/dp_dp.py", line 189\n            xyz_scater_b = xyz_scater_a[:, :, :, :self.M2]\n            DR_ntype = torch.matmul(xyz_scater_a.transpose(-2, -1), xyz_scater_b)\n            DR_ntype = DR_ntype.reshape(batch_size, natoms[ntype], -1)\n                                                           ~~~~~ <--- HERE\n\n            Ei_ntype = self.fitting_net[ntype](DR_ntype)\n\n')),(0,p.kt)("p",null,"\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"Ei = None\nfor type_emb in emb_list:\n    xyz_scater_a : Optional[torch.Tensor] = None\n    for emb in type_emb:\n        ntype, ntype_1 = emb\n        S_Rij = Ri[:, atom_sum:atom_sum+natoms[ntype], ntype_1 * self.maxNeighborNum:(ntype_1+1) * self.maxNeighborNum, 0].unsqueeze(-1)\n        embedding_index = ntype * self.ntypes + ntype_1\n        G: Optional[torch.Tensor] = None\n        found = False\n        for idx, emb_net in enumerate(self.embedding_net):\n            if idx == embedding_index and not found:\n                G = emb_net(S_Rij)\n                found = True\n\n        tmp_a = Ri[:, atom_sum:atom_sum+natoms[ntype], ntype_1 * self.maxNeighborNum:(ntype_1+1) * self.maxNeighborNum].transpose(-2, -1)\n        tmp_b = torch.matmul(tmp_a, G)\n        xyz_scater_a = tmp_b if xyz_scater_a is None else xyz_scater_a + tmp_b\n\n    xyz_scater_a = xyz_scater_a / (self.maxNeighborNum * type_nums)\n    xyz_scater_b = xyz_scater_a[:, :, :, :self.M2]\n    DR_ntype = torch.matmul(xyz_scater_a.transpose(-2, -1), xyz_scater_b)\n    DR_ntype = DR_ntype.reshape(batch_size, natoms[ntype], -1)\n\n    Ei_ntype: Optional[torch.Tensor] = None\n    found = False\n    for idx, fit_net in enumerate(self.fitting_net):\n        if idx == ntype and not found:\n            Ei_ntype = fit_net(DR_ntype)\n            found = True\n    Ei = Ei_ntype if Ei is None else torch.concat((Ei, Ei_ntype), dim=1)\n    atom_sum = atom_sum + natoms[ntype]\n")),(0,p.kt)("p",null,"\u9519\u8bef\u4fe1\u606f\u8868\u660e\u5728\u4f7f\u7528\u53d8\u91cf ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u65f6\uff0c\u5b83\u7684\u503c\u662f\u672a\u5b9a\u4e49\u7684\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u5728\u4f60\u7684\u4ee3\u7801\u7684\u67d0\u4e2a\u90e8\u5206\uff0c\u7279\u522b\u662f\u5728\u5faa\u73af\u6216\u6761\u4ef6\u8bed\u53e5\u4e4b\u5916\u4f7f\u7528\u4e86 ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype"),"\uff0c\u800c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u7684\u503c\u53ef\u80fd\u5c1a\u672a\u88ab\u5206\u914d\u3002"),(0,p.kt)("p",null,"\u9519\u8bef\u53d1\u751f\u5728\u4ee5\u4e0b\u884c\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"DR_ntype = DR_ntype.reshape(batch_size, natoms[ntype], -1)\n")),(0,p.kt)("p",null,"\u6b64\u5904 ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u5e94\u8be5\u662f\u5b9a\u4e49\u597d\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u5728\u524d\u9762\u7684\u5faa\u73af\u4e2d\u5b9a\u4e49\u7684\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"for emb in type_emb:\n    ntype, ntype_1 = emb\n    ...\n\n")),(0,p.kt)("p",null,"\u7531\u4e8e TorchScript \u9700\u8981\u6240\u6709\u53d8\u91cf\u5728\u5b83\u4eec\u88ab\u4f7f\u7528\u4e4b\u524d\u90fd\u6709\u660e\u786e\u7684\u5b9a\u4e49\uff0c\u8fd9\u79cd\u9519\u8bef\u901a\u5e38\u53d1\u751f\u5728\u53d8\u91cf\u53ef\u80fd\u672a\u88ab\u521d\u59cb\u5316\u7684\u60c5\u51b5,\u662f TorchScript \u7f16\u8bd1\u5668\u65e0\u6cd5\u6b63\u786e\u63a8\u65ad ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u7684\u503c\u3002\u4e00\u4e2a\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u662f\u786e\u4fdd ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u5728\u5faa\u73af\u5916\u6709\u4e00\u4e2a\u9ed8\u8ba4\u503c\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"ntype = 0  # \u6216\u4efb\u4f55\u9002\u5f53\u7684\u9ed8\u8ba4\u503c\nfor emb in type_emb:\n    ntype, ntype_1 = emb\n    ...\n")),(0,p.kt)("p",null,"\u5982\u679c ",(0,p.kt)("inlineCode",{parentName:"p"},"type_emb")," \u6709\u53ef\u80fd\u4e3a\u7a7a\uff0c\u8fd9\u5c06\u786e\u4fdd ",(0,p.kt)("inlineCode",{parentName:"p"},"ntype")," \u603b\u662f\u6709\u4e00\u4e2a\u5b9a\u4e49\u597d\u7684\u503c\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u901a\u7528\u89e3\u51b3\u65b9\u6848\uff0c\u9700\u8981\u6839\u636e\u4f60\u7684\u5177\u4f53\u60c5\u51b5\u6765\u51b3\u5b9a\u6700\u5408\u9002\u7684\u9ed8\u8ba4\u503c\u3002"))}_.isMDXComponent=!0}}]);